model User {
  id            String    @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  createdAt     DateTime
  updatedAt     DateTime

  sessions    Session[]
  accounts    Account[]
  finAccounts FinAccount[]

  info Info?

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id @map("_id")
  expiresAt      DateTime
  token          String
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime
  updatedAt      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Info {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  phone     String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("info")
}
